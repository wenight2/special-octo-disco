============================= test session starts ==============================
platform linux -- Python 3.10.6, pytest-7.2.2, pluggy-1.0.0
rootdir: /home/wenight/Desktop/cdk-something/special-octo-disco
plugins: typeguard-2.13.3
collected 3 items

tests/unit/test_github_connect.py .                                      [ 33%]
tests/unit/test_special_octo_disco_stack.py FF                           [100%]

=================================== FAILURES ===================================
__________________________ test_oidc_provider_created __________________________
jsii.errors.JavaScriptError: 
  @jsii/kernel.RuntimeError: Error: No resource with type Custom::AWSCDKOpenIDConnectProvider found
      at Kernel._ensureSync (/tmp/tmp2b02rc_3/lib/program.js:10364:27)
      at Kernel.invoke (/tmp/tmp2b02rc_3/lib/program.js:9764:34)
      at KernelHost.processRequest (/tmp/tmp2b02rc_3/lib/program.js:11536:36)
      at KernelHost.run (/tmp/tmp2b02rc_3/lib/program.js:11496:22)
      at Immediate._onImmediate (/tmp/tmp2b02rc_3/lib/program.js:11497:46)
      at processImmediate (internal/timers.js:461:21)

The above exception was the direct cause of the following exception:

    def test_oidc_provider_created():
        app = core.App()
        stack = SpecialOctoDiscoStack(app, "special-octo-disco")
        template = assertions.Template.from_stack(stack)
    
>       template.has_resource_properties("Custom::AWSCDKOpenIDConnectProvider", {
            "Url" : "https://token.actions.githubusercontent.com"
        })

tests/unit/test_special_octo_disco_stack.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/aws_cdk/assertions/__init__.py:1480: in has_resource_properties
    return typing.cast(None, jsii.invoke(self, "hasResourceProperties", [type, props]))
.venv/lib/python3.10/site-packages/jsii/_kernel/__init__.py:149: in wrapped
    return _recursize_dereference(kernel, fn(kernel, *args, **kwargs))
.venv/lib/python3.10/site-packages/jsii/_kernel/__init__.py:399: in invoke
    response = self.provider.invoke(
.venv/lib/python3.10/site-packages/jsii/_kernel/providers/process.py:377: in invoke
    return self._process.send(request, InvokeResponse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <jsii._kernel.providers.process._NodeProcess object at 0x7fee9e7ea0e0>
request = InvokeRequest(objref=ObjRef(ref='aws-cdk-lib.assertions.Template@10016', interfaces=None), method='hasResourceProperties', args=['Custom::AWSCDKOpenIDConnectProvider', {'$jsii.map': {'Url': 'https://token.actions.githubusercontent.com'}}])
response_type = <class 'jsii._kernel.types.InvokeResponse'>

    def send(
        self, request: KernelRequest, response_type: Type[KernelResponse]
    ) -> KernelResponse:
        req_dict = self._serializer.unstructure(request)
        data = json.dumps(req_dict, default=jdefault).encode("utf8")
    
        # Send our data, ensure that it is framed with a trailing \n
        assert self._process.stdin is not None
        self._process.stdin.write(b"%b\n" % (data,))
        self._process.stdin.flush()
    
        resp: _ProcessResponse = self._serializer.structure(
            self._next_message(), _ProcessResponse
        )
    
        if isinstance(resp, _OkayResponse):
            return self._serializer.structure(resp.ok, response_type)
        elif isinstance(resp, _CallbackResponse):
            return resp.callback
        else:
            if resp.name == ErrorType.JSII_FAULT.value:
                raise JSIIError(resp.error) from JavaScriptError(resp.stack)
>           raise RuntimeError(resp.error) from JavaScriptError(resp.stack)
E           RuntimeError: Error: No resource with type Custom::AWSCDKOpenIDConnectProvider found

.venv/lib/python3.10/site-packages/jsii/_kernel/providers/process.py:339: RuntimeError
____________________________ test_oidc_role_created ____________________________
jsii.errors.JavaScriptError: 
  @jsii/kernel.RuntimeError: Error: Template has 1 resources with type AWS::IAM::Role, but none match as expected.
  The closest result is:
    {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          }
        ],
        "Policies": [
          {
            "PolicyName": "Inline",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "iam:CreateOpenIDConnectProvider",
                    "iam:DeleteOpenIDConnectProvider",
                    "iam:UpdateOpenIDConnectProviderThumbprint",
                    "iam:AddClientIDToOpenIDConnectProvider",
                    "iam:RemoveClientIDFromOpenIDConnectProvider"
                  ]
                }
              ]
            }
          }
        ]
      }
    }
  with the following mismatches:
  	Missing key 'AssumeRolePolicy' among {AssumeRolePolicyDocument,ManagedPolicyArns,Policies} at /Properties/AssumeRolePolicy (using objectLike matcher)
      at Kernel._ensureSync (/tmp/tmp2b02rc_3/lib/program.js:10364:27)
      at Kernel.invoke (/tmp/tmp2b02rc_3/lib/program.js:9764:34)
      at KernelHost.processRequest (/tmp/tmp2b02rc_3/lib/program.js:11536:36)
      at KernelHost.run (/tmp/tmp2b02rc_3/lib/program.js:11496:22)
      at Immediate._onImmediate (/tmp/tmp2b02rc_3/lib/program.js:11497:46)
      at processImmediate (internal/timers.js:461:21)

The above exception was the direct cause of the following exception:

    def test_oidc_role_created():
        app = core.App()
        stack = SpecialOctoDiscoStack(app, "special-octo-disco")
        template = assertions.Template.from_stack(stack)
    
>       template.has_resource_properties("AWS::IAM::Role", {
            "AssumeRolePolicy": {
            "Statement": [{
                "Action": "sts:AssumeRola",
                "Effect": "Allow",
                "Principal": {
                    "Service": "lambda.amazonaws.com"
                }
            }]
            }
        })

tests/unit/test_special_octo_disco_stack.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/aws_cdk/assertions/__init__.py:1480: in has_resource_properties
    return typing.cast(None, jsii.invoke(self, "hasResourceProperties", [type, props]))
.venv/lib/python3.10/site-packages/jsii/_kernel/__init__.py:149: in wrapped
    return _recursize_dereference(kernel, fn(kernel, *args, **kwargs))
.venv/lib/python3.10/site-packages/jsii/_kernel/__init__.py:399: in invoke
    response = self.provider.invoke(
.venv/lib/python3.10/site-packages/jsii/_kernel/providers/process.py:377: in invoke
    return self._process.send(request, InvokeResponse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <jsii._kernel.providers.process._NodeProcess object at 0x7fee9e7ea0e0>
request = InvokeRequest(objref=ObjRef(ref='aws-cdk-lib.assertions.Template@10020', interfaces=None), method='hasResourceProperti...'Action': 'sts:AssumeRola', 'Effect': 'Allow', 'Principal': {'$jsii.map': {'Service': 'lambda.amazonaws.com'}}}}]}}}}])
response_type = <class 'jsii._kernel.types.InvokeResponse'>

    def send(
        self, request: KernelRequest, response_type: Type[KernelResponse]
    ) -> KernelResponse:
        req_dict = self._serializer.unstructure(request)
        data = json.dumps(req_dict, default=jdefault).encode("utf8")
    
        # Send our data, ensure that it is framed with a trailing \n
        assert self._process.stdin is not None
        self._process.stdin.write(b"%b\n" % (data,))
        self._process.stdin.flush()
    
        resp: _ProcessResponse = self._serializer.structure(
            self._next_message(), _ProcessResponse
        )
    
        if isinstance(resp, _OkayResponse):
            return self._serializer.structure(resp.ok, response_type)
        elif isinstance(resp, _CallbackResponse):
            return resp.callback
        else:
            if resp.name == ErrorType.JSII_FAULT.value:
                raise JSIIError(resp.error) from JavaScriptError(resp.stack)
>           raise RuntimeError(resp.error) from JavaScriptError(resp.stack)
E           RuntimeError: Error: Template has 1 resources with type AWS::IAM::Role, but none match as expected.
E           The closest result is:
E             {
E               "Type": "AWS::IAM::Role",
E               "Properties": {
E                 "AssumeRolePolicyDocument": {
E                   "Version": "2012-10-17",
E                   "Statement": [
E                     {
E                       "Action": "sts:AssumeRole",
E                       "Effect": "Allow",
E                       "Principal": {
E                         "Service": "lambda.amazonaws.com"
E                       }
E                     }
E                   ]
E                 },
E                 "ManagedPolicyArns": [
E                   {
E                     "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
E                   }
E                 ],
E                 "Policies": [
E                   {
E                     "PolicyName": "Inline",
E                     "PolicyDocument": {
E                       "Version": "2012-10-17",
E                       "Statement": [
E                         {
E                           "Effect": "Allow",
E                           "Resource": "*",
E                           "Action": [
E                             "iam:CreateOpenIDConnectProvider",
E                             "iam:DeleteOpenIDConnectProvider",
E                             "iam:UpdateOpenIDConnectProviderThumbprint",
E                             "iam:AddClientIDToOpenIDConnectProvider",
E                             "iam:RemoveClientIDFromOpenIDConnectProvider"
E                           ]
E                         }
E                       ]
E                     }
E                   }
E                 ]
E               }
E             }
E           with the following mismatches:
E           	Missing key 'AssumeRolePolicy' among {AssumeRolePolicyDocument,ManagedPolicyArns,Policies} at /Properties/AssumeRolePolicy (using objectLike matcher)

.venv/lib/python3.10/site-packages/jsii/_kernel/providers/process.py:339: RuntimeError
=========================== short test summary info ============================
FAILED tests/unit/test_special_octo_disco_stack.py::test_oidc_provider_created
FAILED tests/unit/test_special_octo_disco_stack.py::test_oidc_role_created - ...
========================= 2 failed, 1 passed in 3.97s ==========================
